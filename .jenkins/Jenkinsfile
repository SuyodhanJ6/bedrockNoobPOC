pipeline {
    agent any
    
    environment {
        AWS_REGION = 'ca-central-1'
        ECR_REPOSITORY = credentials('aws-ecr-repository')
        AWS_CREDENTIALS = credentials('aws-credentials')
        EC2_DEV_HOST = credentials('ec2-dev-host')
        EC2_PROD_HOST = credentials('ec2-prod-host')
        EC2_SSH_KEY = credentials('ec2-ssh-key')
        VERSION = sh(script: 'echo $(date +%Y%m%d).$(git rev-parse --short HEAD)', returnStdout: true).trim()
        
        // Service ports
        AGENT_PORT = '8000'
        BEDROCK_RAG_PORT = '3003'
        MONGODB_MCP_PORT = '3004'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Test') {
            steps {
                sh 'echo "Running tests..."'
                // Add your test commands here if needed
            }
        }
        
        stage('Build Docker Images') {
            steps {
                sh '''
                    # Build Docker images
                    docker build -t bedrock-agent:latest ./agent
                    docker build -t bedrock-rag-mcp:latest ./mcp_servers/bedrock_rag
                    docker build -t mongodb-mcp:latest ./mcp_servers/mongodb
                '''
            }
        }
        
        stage('Push Docker Images to ECR') {
            when {
                branch 'main'
            }
            steps {
                withAWS(credentials: 'aws-credentials', region: '${AWS_REGION}') {
                    sh '''
                        # Login to ECR
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
                        
                        # Tag images
                        docker tag bedrock-agent:latest ${ECR_REPOSITORY}/bedrock-agent:${VERSION}
                        docker tag bedrock-agent:latest ${ECR_REPOSITORY}/bedrock-agent:latest
                        
                        docker tag bedrock-rag-mcp:latest ${ECR_REPOSITORY}/bedrock-rag-mcp:${VERSION}
                        docker tag bedrock-rag-mcp:latest ${ECR_REPOSITORY}/bedrock-rag-mcp:latest
                        
                        docker tag mongodb-mcp:latest ${ECR_REPOSITORY}/mongodb-mcp:${VERSION}
                        docker tag mongodb-mcp:latest ${ECR_REPOSITORY}/mongodb-mcp:latest
                        
                        # Push images to ECR
                        docker push ${ECR_REPOSITORY}/bedrock-agent:${VERSION}
                        docker push ${ECR_REPOSITORY}/bedrock-agent:latest
                        
                        docker push ${ECR_REPOSITORY}/bedrock-rag-mcp:${VERSION}
                        docker push ${ECR_REPOSITORY}/bedrock-rag-mcp:latest
                        
                        docker push ${ECR_REPOSITORY}/mongodb-mcp:${VERSION}
                        docker push ${ECR_REPOSITORY}/mongodb-mcp:latest
                    '''
                }
            }
        }
        
        stage('Deploy to Dev EC2') {
            when {
                branch 'develop'
            }
            steps {
                withAWS(credentials: 'aws-credentials', region: '${AWS_REGION}') {
                    withCredentials([
                        string(credentialsId: 'KNOWLEDGE_BASE_ID', variable: 'KNOWLEDGE_BASE_ID'),
                        string(credentialsId: 'MONGODB_URI', variable: 'MONGODB_URI'),
                        string(credentialsId: 'MONGODB_DB_NAME', variable: 'MONGODB_DB_NAME'),
                        string(credentialsId: 'MONGODB_COLLECTION', variable: 'MONGODB_COLLECTION')
                    ]) {
                        sh '''
                            # Prepare SSH key
                            mkdir -p ~/.ssh
                            echo "${EC2_SSH_KEY}" > ~/.ssh/ec2_key
                            chmod 600 ~/.ssh/ec2_key
                            apk add --no-cache openssh-client
                            
                            # Copy docker-compose.yml to EC2
                            scp -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no docker-compose.yml ec2-user@${EC2_DEV_HOST}:/home/ec2-user/bedrock-rag/
                            
                            # SSH to EC2 and deploy with environment variables
                            ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no ec2-user@${EC2_DEV_HOST} "cd /home/ec2-user/bedrock-rag && \
                                aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY} && \
                                AWS_REGION='${AWS_REGION}' \
                                AWS_ACCESS_KEY_ID='${AWS_ACCESS_KEY_ID}' \
                                AWS_SECRET_ACCESS_KEY='${AWS_SECRET_ACCESS_KEY}' \
                                KNOWLEDGE_BASE_ID='${KNOWLEDGE_BASE_ID}' \
                                MONGODB_URI='${MONGODB_URI}' \
                                MONGODB_DB_NAME='${MONGODB_DB_NAME}' \
                                MONGODB_COLLECTION='${MONGODB_COLLECTION}' \
                                AGENT_PORT='${AGENT_PORT}' \
                                BEDROCK_RAG_PORT='${BEDROCK_RAG_PORT}' \
                                MONGODB_MCP_PORT='${MONGODB_MCP_PORT}' \
                                ECR_REPOSITORY='${ECR_REPOSITORY}' \
                                VERSION='${VERSION}' \
                                ENVIRONMENT='development' \
                                docker-compose down && \
                                docker-compose pull && \
                                docker-compose up -d"
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to Production EC2') {
            when {
                branch 'main'
            }
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    input message: 'Deploy to production?', ok: 'Yes'
                }
                withAWS(credentials: 'aws-credentials', region: '${AWS_REGION}') {
                    withCredentials([
                        string(credentialsId: 'KNOWLEDGE_BASE_ID', variable: 'KNOWLEDGE_BASE_ID'),
                        string(credentialsId: 'MONGODB_URI', variable: 'MONGODB_URI'),
                        string(credentialsId: 'MONGODB_DB_NAME', variable: 'MONGODB_DB_NAME'),
                        string(credentialsId: 'MONGODB_COLLECTION', variable: 'MONGODB_COLLECTION')
                    ]) {
                        sh '''
                            # Prepare SSH key
                            mkdir -p ~/.ssh
                            echo "${EC2_SSH_KEY}" > ~/.ssh/ec2_key
                            chmod 600 ~/.ssh/ec2_key
                            apk add --no-cache openssh-client
                            
                            # Copy docker-compose.yml to EC2
                            scp -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no docker-compose.yml ec2-user@${EC2_PROD_HOST}:/home/ec2-user/bedrock-rag/
                            
                            # SSH to EC2 and deploy with environment variables
                            ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no ec2-user@${EC2_PROD_HOST} "cd /home/ec2-user/bedrock-rag && \
                                aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY} && \
                                AWS_REGION='${AWS_REGION}' \
                                AWS_ACCESS_KEY_ID='${AWS_ACCESS_KEY_ID}' \
                                AWS_SECRET_ACCESS_KEY='${AWS_SECRET_ACCESS_KEY}' \
                                KNOWLEDGE_BASE_ID='${KNOWLEDGE_BASE_ID}' \
                                MONGODB_URI='${MONGODB_URI}' \
                                MONGODB_DB_NAME='${MONGODB_DB_NAME}' \
                                MONGODB_COLLECTION='${MONGODB_COLLECTION}' \
                                AGENT_PORT='${AGENT_PORT}' \
                                BEDROCK_RAG_PORT='${BEDROCK_RAG_PORT}' \
                                MONGODB_MCP_PORT='${MONGODB_MCP_PORT}' \
                                ECR_REPOSITORY='${ECR_REPOSITORY}' \
                                VERSION='${VERSION}' \
                                ENVIRONMENT='production' \
                                docker-compose down && \
                                docker-compose pull && \
                                docker-compose up -d"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed!'
            // Disabled mail step since it's failing, but you can fix it by configuring an SMTP server
            // mail to: 'prashantmalge181@gmail.com',
            //      subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            //      body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}